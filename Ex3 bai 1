//hp
//#include<iostream>
//using namespace std;
//#define endl "\n"
//int GCD(int a, int b);
//class CPhanSo {
//private:
//	int tuSo;
//	int mauSo;
//public:
//	CPhanSo() {
//		this->tuSo = 0;
//		this->mauSo = 1;
//	}
//	CPhanSo(int newTu) {
//		this->tuSo = newTu;
//		this->mauSo = 1;
//	}
//	CPhanSo(int newTu, int newMau) {
//		this->tuSo = newTu;
//		this->mauSo = newMau;
//	}
//	CPhanSo(const CPhanSo& other) {
//		this->tuSo = other.tuSo;
//		this->mauSo = other.mauSo;
//	}
//	void rutGon() {
//		int UCLN = GCD(this->tuSo, this->mauSo);
//		this->tuSo /= UCLN;
//		this->mauSo /= UCLN;
//	}
//	void print() {
//		cout << this->tuSo << "/" << this->mauSo;
//	}
//	CPhanSo operator+(const CPhanSo& other) {
//		CPhanSo res;
//		res.tuSo = this->tuSo * other.mauSo + this->mauSo * other.tuSo;
//		res.mauSo = this->mauSo * other.mauSo;
//		res.rutGon();
//		return res;
//	}
//	CPhanSo operator-(const CPhanSo& other) {
//		CPhanSo res;
//		res.tuSo = this->tuSo * other.mauSo - this->mauSo * other.tuSo;
//		res.mauSo = this->mauSo * other.mauSo;
//		res.rutGon();
//		return res;
//	}
//	CPhanSo operator*(const CPhanSo &other) {
//		CPhanSo res;
//		res.tuSo = this->tuSo * other.tuSo;
//		res.mauSo = this->mauSo * other.mauSo;
//		return res;
//	}
//	CPhanSo operator++() {
//		//tien to -> cong truoc
//		//ko tham so this nam trai toan tu
//		this->tuSo += this->mauSo;
//		return *this;//tra ve chinh doi tuong
//	}
//	CPhanSo operator++(int) {//nummy: tham so gia
//		//co tham so -> this nam trai toan tu
//		//hau to -> cong sau
//		CPhanSo res(*this);//luu gia tri hien tai cua doi tuong
//		this->tuSo += this->mauSo;// cong sau
//		return res;// tra ve gia tri truoc khi tang
//	}
//	friend ostream& operator<<(ostream& out, CPhanSo& p);
//};
//ostream& operator<<(ostream& out, CPhanSo& p) {
//	out << p.tuSo << "/" << p.mauSo;
//	return out;//goi lien hoan cout<<a<<b;
//}
//int main(int argc, char* argv[])
//{
//	CPhanSo ps1(1, 2);
//	CPhanSo ps2(ps1);
//	//CPhanSo res = ++ps1+ps2;//ps1.operator+(ps2)
//	//++ps1;
//	//ps1++;
//
//	//ps1.print();
//	//cout << ps1 << " " << ps2;
//	CPhanSo ps3 = ps1 - ps2;
//	cout << ps3;
//
//	return 0;
//}
//int GCD(int a, int b) {
//	while (a % b != 0) {
//		int tmp = a % b;
//		b = a;
//		a = tmp;
//	}
//	return b;
//}


//Ho va ten: Vo Le Khanh Duy
#include<iostream>
using namespace std;
int Ucln(int a, int b);
class CPhanSo {
private:
	int tuSo;
	int mauSo;
public:
		CPhanSo() {
		//Ho va ten: Vo Le Khanh Duy
		this->tuSo = 0;
		this->mauSo = 1;
	}
	CPhanSo(int newTu) {
		//Ho va ten: Vo Le Khanh Duy
		this->tuSo = newTu;
		this->mauSo = 1;
	}
	CPhanSo(int newTu, int newMau) {
		//Ho va ten: Vo Le Khanh Duy
		this->tuSo = newTu;
		if(newMau != 0)
			this->mauSo = newMau;
		else
			this->mauSo = 1;
		this->rutGon();
	}
	CPhanSo(const CPhanSo& other) {
		//Ho va ten: Vo Le Khanh Duy
		this->tuSo = other.tuSo;
		this->mauSo = other.mauSo;
	}
	void nhap() {
		//Ho va ten: Vo Le Khanh Duy
		cout << "\nNhap tu so: ";
		cin >> this->tuSo;
		cout << "Nhap mau so (nhap 0 thi mac dinh gan la 1): ";
		cin >> this->mauSo;
		if (this->mauSo == 0)
			this->mauSo = 1;
		this->chuanHoa();

	}
	void xuat() {
		//Ho va ten: Vo Le Khanh Duy
		cout << "\nPhan so vua nhap co tu va mau la: ";
		cout << this->tuSo << " " << this->mauSo;
		cout << "\n";
	}
	void rutGon() {
		//Ho va ten: Vo Le Khanh Duy
		int ucln = Ucln(this->tuSo, this->mauSo);
		this->tuSo /= ucln;
		this->mauSo /= ucln;
		this->chuanHoa();
	}
	void chuanHoa() {
		//Ho va ten: Vo Le Khanh Duy
		if (this->tuSo * this->mauSo < 0) {
			if (this->mauSo < 0) {
				//Phan so am
				this->tuSo *= -1;
				this->mauSo *= -1;
			}
		}
		else {
			//Ho va ten: Vo Le Khanh Duy
			//Phan so duong
			if (this->tuSo == 0)
				this->mauSo = 1;
			else {
				if (this->tuSo < 0) {
					this->tuSo *= -1;
					this->mauSo *= -1;
				}
			}
		}
	}
	CPhanSo* cong(CPhanSo* a) {
		//Ho va ten: Vo Le Khanh Duy
		CPhanSo* res = new CPhanSo;
		res->tuSo = this->tuSo * a->mauSo + this->mauSo * a->tuSo;
		res->mauSo = this->mauSo * a->mauSo;
		res->rutGon();
		return res;
	}
	CPhanSo cong(CPhanSo a) {
		//Ho va ten: Vo Le Khanh Duy
		CPhanSo res;
		res.tuSo = this->tuSo * a.mauSo + this->mauSo * a.tuSo;
		res.mauSo = this->mauSo * a.mauSo;
		res.rutGon();
		return res;
	}
	CPhanSo nhan(CPhanSo a) {
		//Ho va ten: Vo Le Khanh Duy
		CPhanSo res;
		res.tuSo = this->tuSo * a.tuSo;
		res.mauSo = this->mauSo * a.mauSo;
		res.rutGon();
		return res;
	}
	bool soSanhBang(CPhanSo a) {
		//Ho va ten: Vo Le Khanh Duy
		this->rutGon();
		a.rutGon();
		if (this->tuSo == a.tuSo && this->mauSo == a.mauSo)
			return true;
		return false;
	}
	bool soSanhBe(CPhanSo a) {
		//Ho va ten: Vo Le Khanh Duy
		this->rutGon();
		a.rutGon();
		if (this->giaTriPhanSo() < a.giaTriPhanSo())
			return true;
		return false;
	}
	CPhanSo& gan(int k) {
		//Ho va ten: Vo Le Khanh Duy
		this->tuSo = k;
		this->mauSo = 1;
		return *this;// ko return -> loi Trap 
		// doi tuong duoc gan sua doi truc tiep , ko tao lap ban sao
	}
	CPhanSo& gan(CPhanSo a) {
		//Ho va ten: Vo Le Khanh Duy
		this->tuSo = a.tuSo;
		this->mauSo = a.mauSo;
		return *this;
	}
	void ganTu(int tuSo) {
		//Ho va ten: Vo Le Khanh Duy
		this->tuSo = tuSo;
	}
	CPhanSo operator+(const CPhanSo& y) {
		//Ho va ten: Vo Le Khanh Duy
		CPhanSo res;
		res.tuSo = this->tuSo * y.mauSo + this->mauSo * y.tuSo;
		res.mauSo = this->mauSo * y.mauSo;
		res.rutGon();
		return res;
	}
	CPhanSo operator-(const CPhanSo& other) {
		//Ho va ten: Vo Le Khanh Duy
		CPhanSo res;
		res.tuSo = this->tuSo * other.mauSo - this->mauSo * other.tuSo;
		res.mauSo = this->mauSo * other.mauSo;
		res.rutGon();
		return res;
	}
	CPhanSo operator*(const CPhanSo& other) {
		//Ho va ten: Vo Le Khanh Duy
		CPhanSo res;
		res.tuSo = this->tuSo * other.tuSo;
		res.mauSo = this->mauSo * other.mauSo;
		res.rutGon();
		return res;
	}
	CPhanSo operator/(const CPhanSo& other) {
		//Ho va ten: Vo Le Khanh Duy
		CPhanSo res;
		res.tuSo = this->tuSo * other.mauSo;
		res.mauSo = this->mauSo * other.tuSo;
		res.rutGon();
		return res;
	}
	CPhanSo operator++(int) {//nummy: tham so gia
		//Ho va ten: Vo Le Khanh Duy
		//co tham so -> this nam phai toan tu doi voi operator ++
		//hau to -> cong sau
		CPhanSo res(*this);//luu gia tri hien tai cua doi tuong
		this->tuSo += this->mauSo;// cong sau
		res.rutGon();
		this->rutGon();
		return res;// tra ve gia tri truoc khi tang
	}
	CPhanSo operator++(){
		//Ho va ten: Vo Le Khanh Duy
		//tien to -> cong truoc
		//ko tham so this nam trai toan tu
		this->tuSo += this->mauSo;
		this->rutGon();
		return *this;//tra ve chinh doi tuong
	}
	CPhanSo operator--(int) {
		//Ho va ten: Vo Le Khanh Duy
		CPhanSo res(*this);
		this->tuSo -= this->mauSo;
		this->rutGon();
		res.rutGon();
		return res;
	}
	float giaTriPhanSo() {
		//Ho va ten: Vo Le Khanh Duy
		return float(this->tuSo) / this->mauSo;//
	}
	bool operator>(CPhanSo &other){
		//Ho va ten: Vo Le Khanh Duy
		return (this->giaTriPhanSo() > other.giaTriPhanSo());
	}
	bool operator<(CPhanSo &other){
		//Ho va ten: Vo Le Khanh Duy
		return (this->giaTriPhanSo() < other.giaTriPhanSo());
	}
	bool operator>=( CPhanSo &other){
		//Ho va ten: Vo Le Khanh Duy
		return (this->giaTriPhanSo() >= other.giaTriPhanSo());
	}
	bool operator<=( CPhanSo &other){
		//Ho va ten: Vo Le Khanh Duy
		return (this->giaTriPhanSo() <= other.giaTriPhanSo());
	}
	bool operator==(CPhanSo &other){
		//Ho va ten: Vo Le Khanh Duy
		return this->giaTriPhanSo() == other.giaTriPhanSo();
	}
	CPhanSo operator=(CPhanSo &other){
		//Ho va ten: Vo Le Khanh Duy
		this->tuSo = other.tuSo;
		this-> mauSo = other.mauSo;
	}
	CPhanSo operator+=(const CPhanSo &other){
		//Ho va ten: Vo Le Khanh Duy
		this->tuSo = this->tuSo*other.mauSo + this->mauSo*other.tuSo;
		this->mauSo *= other.mauSo;
		this->rutGon();	
	}
	CPhanSo operator-=(const CPhanSo &other){
		//Ho va ten: Vo Le Khanh Duy
		this->tuSo = this->tuSo*other.mauSo - this->mauSo*other.tuSo;
		this->mauSo *= other.mauSo;
		this->rutGon();	
	}
	CPhanSo operator*=(CPhanSo &other){
		//Ho va ten: Vo Le Khanh Duy
		this->tuSo *= other.tuSo;
		this->mauSo *= other.mauSo;
		this->rutGon();
	}
	CPhanSo operator/=(CPhanSo &other){
		//Ho va ten: Vo Le Khanh Duy
		this->tuSo *= other.mauSo;
		this->mauSo *= other.tuSo;
		this->rutGon();
	}
/*	int* operator.*(CPhanSo &p){
		if(this != NULL)
			delete []this;
		this = new int [2];
		this[0] = p.tuSo;
		this[1] = p.mauSo;
	}*/
	friend istream& operator>>(istream &in, CPhanSo &p);
	friend ostream& operator<<(ostream& out, const CPhanSo &p);
};
istream& operator>>(istream &in, CPhanSo &p){//ko const do co lam thay doi o
	//Ho va ten: Vo Le Khanh Duy
	cout<<"Nhap tu so: ";
	in >> p.tuSo;
	cout<<"Nhap mau so: ";
    in >> p.mauSo;
	return in;
}
ostream& operator<<(ostream& out, const CPhanSo &p){
		//Ho va ten: Vo Le Khanh Duy
		out << p.tuSo << "/" << p.mauSo;
		return out;
}
int main(int argc, char* argv[])
{
	bool Break = false;
	int n = -1, tmp = -1;
	while (Break == false) {
		cout << "\n----------\n";
		cout << "Danh sach cac thao tac: \n";
		cout<<"\n1. Test tao lap mac dinh";
		cout<<"\n2. Test tao lap mot tham so";
		cout<<"\n3. Test tao lap hai tham so";
		cout<<"\n4. Test tao lap sao chep";
		cout << "\n5. Test tinh tong hai phan so  (dung operator +)";
		cout << "\n6. Test tinh hieu hai phan so  (dung operator -)";
		cout << "\n7. Test tinh tich hai phan so  (dung operator *)";
		cout << "\n8. Test tinh thuong hai phan so  (dung operator /)";
		cout << "\n9. Cong 1 vao phan so  (dung operator ++)  - hau to";
		cout << "\n10. Cong 1 vao phan so  (dung operator ++) - tien to";
		cout << "\n11. Tru 1 vao phan so  (dung operator --)";
		cout << "\n12. So sanh phan so lon (dung operator >)";
		cout << "\n13. So sanh phan so be (dung operator <)";
		cout << "\n14. So sanh phan so lon hon hoac bang (dung operator >=)";
		cout << "\n15. So sanh phan so be hon hoac bang (dung operator <=)";
		cout << "\n16. So sanh phan so  bang (dung operator ==)";
		cout << "\n17. Gan phan so (dung operator =)";
		cout<<"\n18. operator += ";
		cout<<"\n19. operator -= ";
		cout<<"\n20. operator *= ";
		cout<<"\n21. operator /= ";
		cout<<"\n22. operator >> ";
		cout<<"\n23. operator << ";
		cout << "\nNhap so tuong ung thao tac can thuc hien [1->23]: ";
		cin >> n;
		switch (n) {
		case 1:{
			CPhanSo a;
			cout << a;
			break;
		}
		case 2:{
			int parameter;
			cout<<"Nhap 1 tham so can truyen (so nguyen): ";
			cin>>parameter;
			CPhanSo a(parameter);
			cout<<"Phan so sau khi tao lap: ";
			cout << a;
			break;
		}
		case 3:{
			int parameter1, parameter2;
			cout<<"Nhap 2 tham so can truyen (so nguyen): ";
			cin>>parameter1>>parameter2;
			CPhanSo a(parameter1,parameter2);
			cout<<"Phan so sau khi tao lap: ";
			cout << a;
			break;
		}
		case 4:{
			CPhanSo a;
			cout<<"Nhap phan so: \n";
			cin >> a;
			a.chuanHoa();
			a.rutGon();
			CPhanSo b(a);
			cout<<"Phan so sau khi tao lap sao chep phan so vua nhap: ";
			cout<<b;
			break;	
		}
		case 5: {
			cout << "\nTest tinh tong hai phan so  (dung operator +):";
			CPhanSo a, b;
			a.nhap();
			cout << "\n";
			b.nhap();
			cout << "\nTong hai phan so vua nhap: ";
			CPhanSo c = a + b;
			cout << c;
			break;
		}
		case 6: {
			cout << "\nTest tinh hieu hai phan so  (dung operator -): \n";
			CPhanSo a, b;
			a.nhap();
			cout << "\n";
			b.nhap();
			cout << "\nHieu hai phan so vua nhap: ";
			CPhanSo c = a - b;
			cout << c;
			break;
		}
		case 7: {
			cout << "\nTest tinh tich hai phan so  (dung operator *): \n";
			CPhanSo a, b;
			a.nhap();
			cout << "\n";
			b.nhap();
			cout << "\nTich hai phan so vua nhap: ";
			CPhanSo c = a * b;
			cout << c;
			break;
		}
		case 8: {
			cout << "\nTest tinh thuong hai phan so  (dung operator /): \n";
			CPhanSo a, b;
			a.nhap();
			b.nhap();
			cout << "\nThuong hai phan so vua nhap: ";
			CPhanSo c = a / b;
			cout << c;
			break;
		}
		case 9: {
			cout << "\nTest cong 1 vao phan so  (dung operator ++) - hau to: \n";//hau to
			CPhanSo a;
			a.nhap();
			cout<<"Phan so sau khi cong 1: ";
			a++;
			cout << a;
			break;
		}
		case 10: {
			cout << "\nTest cong 1 vao phan so  (dung operator ++) - tien to: \n";//hau to
			CPhanSo a;
			a.nhap();
			cout << "Phan so sau khi cong 1: ";
			++a;
			cout << a;
			break;
		}
		case 11: {
			cout << "\nTest tru 1 vao phan so  (dung operator --) - hau to: \n";//hau to
			CPhanSo a;
			a.nhap();
			cout << "Phan so sau khi tru 1: ";
			a--;
			cout << a;
			break;
		}
		default: {
			cout << "\nSo vua nhap khong hop le! Chuong trinh ket thuc tai day! ";
			Break = true;
			break;
		}
		case 12:{
			
			break;
		}
	}
		while (Break == false && tmp != 1) {
			cout << "\nNhap 1 de lam tiep, nhap 0 de dung: ";
			cin >> tmp;
			if (tmp == 0)
					Break = true;
		}
	}
	return 0;
}
int Ucln(int a, int b) {
	if (a == 0)	return b;
	if (b == 0)	return a;
	while (b % a != 0) {//
		int tmp = a % b;
		a = b;
		b = tmp;
	}
	return a;
}
